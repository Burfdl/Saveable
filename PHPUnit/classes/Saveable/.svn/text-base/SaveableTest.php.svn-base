<?php

require_once dirname(__FILE__) . '/../../../Saveable.php';

/**
 * Test class for Saveable.
 * Generated by PHPUnit on 2011-05-30 at 22:46:03.
 */
class SaveableTest extends PHPUnit_Framework_TestCase {

	/**
	 * @var Saveable
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$this->connection = new PDO("mysql:host=localhost;port=8889;dbname=test;unix_socket=/Applications/MAMP/tmp/mysql/mysql.sock", "testing", "fCPreFuUjKeeLfWS");
		DBM::setConnection($this->connection);
		foreach ($this->connection->query("SHOW TABLES")->fetchAll(PDO::FETCH_ASSOC) as $row)
		{
			$this->connection->query("DROP TABLE `".DBM::escape(array_shift($row))."`");
		}
		DBM::resetCache();
		DBM::setCacheIsEnabled(true);
		DBM::resetCache();
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		
	}

	/**
	 * @todo Implement testExists().
	 */
	public function testExists()
	{
		$tsav = new TestSaveable();
		$tsav->Label = "testobject";
		$tsav->save();
		$id = $tsav->getUniqueKey();
		$tsav = new TestSaveable();
		$tsav->Label = "testobject";
		$this->assertTrue($tsav->exists());
		$this->assertEquals($id, $tsav->getUniqueKey());
		$tsav = new TestSaveable();
		$tsav->Label = "testobject";
		$tsav->save();
		$tsav = new TestSaveable();
		$tsav->Label = "testobject";
		$this->assertFalse($tsav->exists());
	}

	/**
	 * @todo Implement testGetObjectVersion().
	 */
	public function testGetObjectVersion() {
		$tsav = new TestSaveable();
		$this->assertNull($tsav->getObjectVersion());
	}

	/**
	 * @todo Implement testGetTableDescription().
	 */
	public function testGetTableDescription() {
		$tsav = new TestSaveable();
		$this->assertEquals(
			array(
				array(
					"Field" => "TestSaveableID",
					"Type" => "bigint(10)",
					"Null" => "NO",
					"Key" => "PRI",
					"Default" => "",
					"Extra" => "auto_increment"
				),
				array(
					"Field" => "Label",
					"Type" => "varchar(60)",
					"Null" => "NO",
					"Key" => "",
					"Default" => "",
					"Extra" => ""
				)
			), 
			$tsav->getTableDescription()
		);
	}

	/**
	 * @todo Implement testGetTableDefinition().
	 */
	public function testGetTableDefinition() {
		$tsav = new TestSaveable();
		$this->assertTrue(
			$tsav->getTableDefinition() instanceof TableDefinition || 
			$tsav->getTableDefinition === null
		);
		$this->assertEquals(
			"CREATE TABLE `TestSaveable` (\n `TestSaveableID` ".
				"bigint(10) NULL AUTO_INCREMENT COMMENT ".
				"'~~NumberFieldDefinition~~',\n `Label` varchar(60) NOT NULL ".
				"COMMENT '~~TextFieldDefinition~~',\n ".
				"PRIMARY KEY (`TestSaveableID`)\n)", 
			$tsav->getTableDefinition()->toSql()
		);
	}

	/**
	 * @todo Implement test__get().
	 */
	public function test__get() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement test__isset().
	 */
	public function test__isset() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement test__unset().
	 */
	public function test__unset() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement test__set().
	 */
	public function test__set() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testGetChildren().
	 */
	public function testGetChildren() {
		$tsav = new TestSaveable();
		$tsav->Label = "Parent";
		$tsav->save();
		$tchi = new TestChildSaveable();
		$tchi->SomeCrazyIDForTestSaveable = $tsav->getUniqueKey();
		$tchi->Label = "Child";
		$tchi->save();
		$children = $tsav->getChildren("TestChildSaveable");
		$this->assertEquals(1, count($children));
		$this->assertInstanceOf("TestChildSaveable", $children[0]);
		$this->assertEquals($tchi->getData(), $children[0]->getData());
	}

	/**
	 * @todo Implement testGetParent().
	 */
	public function testGetParent() {
		$tsav = new TestSaveable();
		$tsav->Label = "Parent";
		$tsav->save();
		$tchi = new TestChildSaveable();
		$tchi->SomeCrazyIDForTestSaveable = $tsav->getUniqueKey();
		$tchi->Label = "Child";
		$tchi->save();
		$parent = $tchi->getParent("TestSaveable");
		$this->assertInstanceOf("TestSaveable", $parent);
		$this->assertEquals($tsav ->getData(), $parent->getData());
	}

	/**
	 * @todo Implement testGetUniqueKey().
	 */
	public function testGetUniqueKey() {
		$tsav = new TestSaveable();
		$tsav->checkClassTable();
		/* @var $this->connection PDO */
		$this->connection->query("INSERT INTO ".$tsav->getTableName()." (Label) VALUES (\"TestLabel\")");
		$id = $this->connection->query("SELECT LAST_INSERT_ID()")->fetchAll(PDO::FETCH_ASSOC);
		$id = array_pop($id[0]);
		$tsav = new TestSaveable($id);
		$this->assertEquals($id, $tsav->getUniqueKey());
	}

	/**
	 * @todo Implement testSave().
	 */
	public function testSave() {
		$tsav = new TestSaveable();
		$tsav->Label = "TestLabel";
		$tsav->save();
		$this->assertEquals(
			array(
				array(
					$tsav->getUniqueKeyField() => "1",
					"Label"	=> "TestLabel"
				)
			),
			$this->
				connection->
				query("SELECT * FROM ".$tsav->getTableName())->
				fetchAll(PDO::FETCH_ASSOC)
		);
	}

	/**
	 * @todo Implement testLoad().
	 */
	public function testLoad() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testDebug().
	 */
	public function testDebug() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

}

class TestSaveable extends Deletable
{
	public function getTableDefinition() {
		return TableDefinition::manufacture(get_class($this))->
			addField(
				NumberFieldDefinition::manufacture(get_class($this)."ID")->
					setLength(10)->
					setIsSigned(false)->
					setIsAutoIncrement(true)
			)->addField(
				TextFieldDefinition::manufacture("Label")->
					setIsNullable(false)
			)->addIndex(
				PrimaryKeyDefinition::manufacture()->
					addField(get_class($this)."ID")
			);
	}
}

class TestChildSaveable extends Deletable
{
	public function getTableDefinition() {
		return TableDefinition::manufacture(get_class($this))->
			addField(
				NumberFieldDefinition::manufacture(get_class($this)."ID")->
					setLength(10)->
					setIsSigned(false)->
					setIsAutoIncrement(true)
			)->addField(
				NumberFieldDefinition::manufacture("SomeCrazyIDForTestSaveable")->
					setLength(10)->
					setIsSigned(false)
			)->addField(
				TextFieldDefinition::manufacture("Label")->
					setIsNullable(false)
			)->addIndex(
				PrimaryKeyDefinition::manufacture()->
					addField(get_class($this)."ID")
			)->addIndex(
				ForeignKeyDefinition::manufacture("TestSaveablePrimaryKey", "TestSaveable")->
					addField("SomeCrazyIDForTestSaveable")
			);
	}
}

?>
